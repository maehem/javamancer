/*
 * MIT License
 *
 * Copyright (c) 2024 Mark J. Koch ( @maehem on GitHub )
 *
 * Portions of this software are Copyright (c) 2018 Henadzi Matuts and are
 * derived from their project: https://github.com/HenadziMatuts/Reuromancer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.maehem.javamancer.neuro.view.database;

import com.maehem.javamancer.neuro.model.GameState;
import com.maehem.javamancer.neuro.model.item.DeckItem;
import com.maehem.javamancer.neuro.view.PopupListener;
import java.util.logging.Level;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;

/*
 * <pre>
[0] :: * N. A. S. A. *
[1] :: X. Exit System 1. Asteroid Mission Summary 2. Lunar Factory Summary 3. Mars Colony Summary 4. Terraforming Study
[2] :: 5. Software Library 6. HALs Funding Strategy
[3] :: * NASA Mission Planning System * *     Ames Research Center     * *   Space Sciences Division    * *       DECNET Node Mars       *
[4] ::  Software Library  X. Exit To Main 1. Probe 1.0
[5] :: 2. Python 2.0 3. BlowTorch 4.0 4. Decoder 4.0
[6] :: ASTEROID MISSION SUMMARY  A mission part way into the asteroid belt to obtain data on particle densities and size distributions requires a relatively low launch energy and has essentially no launch window restrictions. The information which such a mission could provide will be very important to the design of deep space missions; in addition to providing the basis for a better understanding of the behavior of particles subjected to collisions and the space environment.  The individual asteroid which will be the easiest to observe is Eros. This asteroid, at closest approach, is well out of the main belt and missions to Eros therefore have low launch energy requirements and do not have the particle collision problems associated with main belt exploration. The velocity with which the spacecraft approaches the asteroids is, in general, so high as to require a terminal maneuver to provide adequate observation time. It is necessary to consider the trade-off between launch energy, terminal propulsion weight, and instrumentation capability in some detail to obtain an optimum mission design. For Eros, in particular, the approach velocity and launch velocity vary rapidly with launch date.
[7] :: SELF-REPLICATING LUNAR FACTORY  The Self-Replicating Factory design for unit replication is intended as a fully autonomous, general-purpose replicating factory to be used on the surface of any planetary body or moon--the lunar surface, in this case.  Useful products generated by the lunar factory include: Lunar soil thrown into orbit by mass drivers for orbital processing, construction, reaction mass for deep space missions, or as shielding against radiation; Processed chemicals and elements extracted from lunar dust, such as oxygen to be used as fuel for inter-orbital vehicles and as reaction mass for ion thrusters and mass drivers; Components for large deep space research vessels, radio telescopes, and large orbital solar power satellites; Complex devices such as computer microelectronics, robots, and teleoperators, power cells, and mass driver subassemblies.  A lunar factory that has undergone thousand-fold growth (doubling once a year for ten years) represents a 2 GW power generation capacity, a computing capacity of 16 terabits, and a memory capacity of 272 terabits, all of which have many useful applications.
[8] :: File Under Modification
 * </pre>
 */
/**
 *
 * @author Mark J Koch ( @maehem on GitHub )
 */
public class NASADatabaseView extends DatabaseView {

    private enum Mode {
        SUB, MENU
    }
    private Mode mode = Mode.SUB; // Sub-mode handled by superclass.

    public NASADatabaseView(GameState gs, Pane p, PopupListener l) {
        super(gs, p, l);

        //dbTextResource.dumpList();
        if (gameState.usingDeck.getMode() == DeckItem.Mode.CYBERSPACE) {
            accessLevel = 3;
            siteContent();
        } else {
            landingPage();
        }
    }

    @Override
    protected final void landingPage() {
        pane.getChildren().clear();
        mode = Mode.SUB;

        Text helloText = new Text("\n\n\n\n");

        TextFlow tf = pageTextFlow(headingText, helloText, CONTINUE_TEXT);
        pane.getChildren().add(tf);
    }

    @Override
    protected final void siteContent() {
        mainMenu();
    }

    private void mainMenu() {
        pane.getChildren().clear();
        mode = Mode.MENU;

        TextFlow tf = pageTextFlow(headingText);

        String menuString = dbTextResource.get(1);
        if (accessLevel > 1) {
            menuString += "\r" + dbTextResource.get(2);
        }
        String[] split = menuString.split("\\r");
        for (String s : split) {
            Text menuItem = new Text("\n         " + s);
            tf.getChildren().add(menuItem);
            menuItem.setOnMouseClicked((t) -> {
                t.consume();
                itemPage(s.trim().substring(0, 1));
            });
        }

        pane.getChildren().add(tf);
        pane.setOnMouseClicked(null);
    }

    private void itemPage(String itemLetter) {
        switch (itemLetter) {
            case "X" -> {
                listener.popupExit();
            }
            case "1" -> { // Notes of interest
                viewText(6);
            }
            case "2" -> {
                viewText(7);
            }
            case "3" -> {
                viewText(8);
            }
            case "4" -> {
                viewText(8);
            }
            case "5" -> {
                if (accessLevel > 1) {
                    downloads();
                }
            }
            case "6" -> {  // Faculty news
                if (accessLevel > 1) {
                    viewText(8);
                }
            }
        }
    }

    @Override
    public boolean handleKeyEvent(KeyEvent keyEvent) {
        KeyCode code = keyEvent.getCode();
        LOGGER.log(Level.SEVERE, "Handle key event.");
        switch (mode) {
            case MENU -> {
                if (code.equals(KeyCode.X)
                        || code.equals(KeyCode.SPACE)
                        || code.equals(KeyCode.ESCAPE)) {
                    LOGGER.log(Level.SEVERE, "Menu wants to exit system.");
                    keyEvent.consume();
                    return true;
                } else if (code.isDigitKey()) {
                    keyEvent.consume();
                    itemPage(code.getChar());
                    return false;
                }
            }
//            case EDIT -> {
//                if (code.equals(KeyCode.X)
//                        || code.equals(KeyCode.ESCAPE)) {
//                    LOGGER.log(Level.SEVERE, "Go back up menu level.");
//                    mainMenu();
//                    keyEvent.consume();
//                    return false;
//                }
//            }
            // else ignore key

        }
        return super.handleKeyEvent(keyEvent);
    }
}
